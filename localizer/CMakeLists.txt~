cmake_minimum_required(VERSION 2.4.6)
#include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)
project(localizer)

find_package(PkgConfig REQUIRED)
pkg_check_modules(BULLET bullet)
include_directories(${BULLET_INCLUDE_DIRS})

find_package(catkin REQUIRED COMPONENTS 
  message_generation 
  roscpp 
  rospy 
  std_msgs 
  tf 
  geometry_msgs 
  nav_msgs 
  visualization_msgs 
  message_filters
  sensor_msgs
)

add_message_files(FILES
  GVGmap.msg
)

add_service_files(FILES
  MaxUncertainty.srv  
  MinUncertainty.srv  
  StartFilter.srv  
  UpdateFilter.srv
)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

#set the default path for built executables to the "bin" directory
#set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
#set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#uncomment if you have defined messages
generate_messages(DEPENDENCIES 
  std_msgs 
  sensor_msgs
)

catkin_package(CATKIN_DEPENDS 
  message_runtime 
  roscpp 
  rospy
  std_msgs 
  tf 
  geometry_msgs 
  nav_msgs 
  visualization_msgs
  sensor_msgs
) 
include_directories(${catkin_INCLUDE_DIRS})

find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})


find_package(Eigen REQUIRED)
include_directories(${Eigen_INCLUDE_DIRS})
add_definitions(${EIGEN_DEFINITIONS})
include_directories(${CMAKE_CURRENT_BINARY_DIR})
#SET ( CMAKE_CXX_FLAGS "-Wall -Wno-deprecated -g" )

#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(example examples/example.cpp)
#target_link_libraries(example ${PROJECT_NAME})
add_executable(localizerGVGNode src/main.cpp src/localizerGVG.cpp)
add_executable(localizer_viz  src/viz.cpp)
#add_executable(testEigen  src/testEigen.cpp)

target_link_libraries(localizerGVGNode ${catkin_LIBRARIES} ${BULLET_LIBRARIES})
add_dependencies(localizerGVGNode ${PROJECT_NAME}_generate_messages_cpp)
target_link_libraries(localizer_viz ${catkin_LIBRARIES} ${BULLET_LIBRARIES} ${OpenCV_LIBRARIES})
add_dependencies(localizer_viz ${PROJECT_NAME}_generate_messages_cpp)
target_link_libraries(testEigen ${catkin_LIBRARIES} ${BULLET_LIBRARIES} ${OpenCV_LIBRARIES})
add_dependencies(testEigen ${PROJECT_NAME}_generate_messages_cpp)


